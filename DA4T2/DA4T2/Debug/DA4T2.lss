
DA4T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000152  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f0  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000633  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000256  00000000  00000000  00000f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000366  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000015da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
volatile uint8_t ADCvalue;
volatile char step_table[4] = {0b01100110, 0b11001100, 0b10011001, 0b00110011};


int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <main+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF; //port b is an output
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 b9       	out	0x04, r24	; 4
	
	//---------------------------------------------------------------
	// INITIALIZE ADC TO READ POTENTIOMETER
	//---------------------------------------------------------------
	ADMUX |= (1 << REFS0) | (1 << ADLAR);	//Vref = AVCC, left adjusted
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 66       	ori	r24, 0x60	; 96
  bc:	80 83       	st	Z, r24
	ADMUX &= ~(0x0F); //Uses analog input 0
  be:	80 81       	ld	r24, Z
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //prescale clock of 128
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADATE); // Enable ADC and auto trigger
  ce:	80 81       	ld	r24, Z
  d0:	80 6a       	ori	r24, 0xA0	; 160
  d2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Begin conversion
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24

	//---------------------------------------------------------------
	// CTC Mode
	//---------------------------------------------------------------
	//OCR1A = ADCvalue;
	TCNT1 = 0;
  da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1A |= 0;
  e2:	e0 e8       	ldi	r30, 0x80	; 128
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12); //CTC Mode, OCR1A as top
  ea:	e1 e8       	ldi	r30, 0x81	; 129
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12) | (1 << CS10);
  f4:	80 81       	ld	r24, Z
  f6:	85 60       	ori	r24, 0x05	; 5
  f8:	80 83       	st	Z, r24
	volatile int step;

	while (1)
	{
		while((ADCSRA & (1<<ADIF))==0); // Wait until conversion to finish
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
		ADCvalue = ADCH; //Value detected from pot
  fe:	29 e7       	ldi	r18, 0x79	; 121
 100:	30 e0       	ldi	r19, 0x00	; 0
		OCR1A = ADCvalue;
 102:	48 e8       	ldi	r20, 0x88	; 136
 104:	50 e0       	ldi	r21, 0x00	; 0
	TCCR1B |= (1 << CS12) | (1 << CS10);
	volatile int step;

	while (1)
	{
		while((ADCSRA & (1<<ADIF))==0); // Wait until conversion to finish
 106:	80 81       	ld	r24, Z
 108:	84 ff       	sbrs	r24, 4
 10a:	fd cf       	rjmp	.-6      	; 0x106 <main+0x60>
		ADCvalue = ADCH; //Value detected from pot
 10c:	d9 01       	movw	r26, r18
 10e:	8c 91       	ld	r24, X
 110:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		OCR1A = ADCvalue;
 114:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	da 01       	movw	r26, r20
 11c:	11 96       	adiw	r26, 0x01	; 1
 11e:	9c 93       	st	X, r25
 120:	8e 93       	st	-X, r24
		
		if (TIFR1 & (1 << OCF1A)) //Check if counter & TOP are equal
 122:	b1 9b       	sbis	0x16, 1	; 22
 124:	0c c0       	rjmp	.+24     	; 0x13e <main+0x98>
		{
			
			PORTB = step_table[step];
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	9a 81       	ldd	r25, Y+2	; 0x02
 12a:	80 50       	subi	r24, 0x00	; 0
 12c:	9f 4f       	sbci	r25, 0xFF	; 255
 12e:	dc 01       	movw	r26, r24
 130:	8c 91       	ld	r24, X
 132:	85 b9       	out	0x05, r24	; 5
			step++;
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	9a 83       	std	Y+2, r25	; 0x02
 13c:	89 83       	std	Y+1, r24	; 0x01
		}
		TIFR1 |= (1 << OCF1A); //TIFR1 holds OCF1A. Clear flag here to reset counter
 13e:	b1 9a       	sbi	0x16, 1	; 22


		step &= 0x03;
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	9a 81       	ldd	r25, Y+2	; 0x02
 144:	83 70       	andi	r24, 0x03	; 3
 146:	99 27       	eor	r25, r25
 148:	9a 83       	std	Y+2, r25	; 0x02
 14a:	89 83       	std	Y+1, r24	; 0x01


	}
 14c:	dc cf       	rjmp	.-72     	; 0x106 <main+0x60>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
