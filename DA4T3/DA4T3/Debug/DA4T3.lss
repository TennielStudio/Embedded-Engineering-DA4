
DA4T3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000018c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f4  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000665  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000260  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035d  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000075  00000000  00000000  00001581  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000015f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
/*Function Definitions*/
void pulses(volatile uint8_t useconds);

int main(void)
{
	DDRB = 0xFF; //port B as an output 
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	
	//---------------------------------------------------------------
	// INITIALIZE ADC TO READ POTENTIOMETER
	//---------------------------------------------------------------
	ADMUX |= (1 << REFS0) | (1 << ADLAR);	//Vref = AVCC, left adjusted
  94:	ec e7       	ldi	r30, 0x7C	; 124
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 66       	ori	r24, 0x60	; 96
  9c:	80 83       	st	Z, r24
	ADMUX &= ~(0x0F); //Uses analog input 0
  9e:	80 81       	ld	r24, Z
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //prescale clock of 128
  a4:	ea e7       	ldi	r30, 0x7A	; 122
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	87 60       	ori	r24, 0x07	; 7
  ac:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADATE); // Enable ADC and auto trigger
  ae:	80 81       	ld	r24, Z
  b0:	80 6a       	ori	r24, 0xA0	; 160
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Begin conversion
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24

	//---------------------------------------------------------------
	// STEPPER MOTOR INTERFACING
	//---------------------------------------------------------------
	ICR1 = 4999;
  ba:	87 e8       	ldi	r24, 0x87	; 135
  bc:	93 e1       	ldi	r25, 0x13	; 19
  be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0; //25% DC 
  c6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ca:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1); //OCR1A to compare match on high 
  ce:	e0 e8       	ldi	r30, 0x80	; 128
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 6a       	ori	r24, 0xA0	; 160
  d6:	80 83       	st	Z, r24
	
	//Fast PWM
	TCCR1A |= (1 << WGM11);
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
  de:	e1 e8       	ldi	r30, 0x81	; 129
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 61       	ori	r24, 0x18	; 24
  e6:	80 83       	st	Z, r24
	
	TCCR1B |= (1 << CS11) | (1 << CS10);
  e8:	80 81       	ld	r24, Z
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	80 83       	st	Z, r24
	
    while (1) 
    {
		while((ADCSRA & (1<<ADIF))==0); // Wait until conversion to finish
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
		ADCvalue = ADCH; //Value detected from pot
  f2:	c9 e7       	ldi	r28, 0x79	; 121
  f4:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void pulses(volatile uint8_t useconds)
{
	OCR1A = (useconds);
  f6:	a8 e8       	ldi	r26, 0x88	; 136
  f8:	b0 e0       	ldi	r27, 0x00	; 0
	
	TCCR1B |= (1 << CS11) | (1 << CS10);
	
    while (1) 
    {
		while((ADCSRA & (1<<ADIF))==0); // Wait until conversion to finish
  fa:	80 81       	ld	r24, Z
  fc:	84 ff       	sbrs	r24, 4
  fe:	fd cf       	rjmp	.-6      	; 0xfa <main+0x6a>
		ADCvalue = ADCH; //Value detected from pot
 100:	88 81       	ld	r24, Y
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		pulses(ADCvalue);
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    }
}

void pulses(volatile uint8_t useconds)
{
	OCR1A = (useconds);
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	9c 93       	st	X, r25
 110:	8e 93       	st	-X, r24
 112:	f3 cf       	rjmp	.-26     	; 0xfa <main+0x6a>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
